syntax = "proto3";

package octavestream;

service OctaveStream {
  rpc Subscribe(SubscribeRequest) returns (stream Update) {}
}

message SubscribeRequest {
  string access_token = 1;
  repeated string owners = 2;
  repeated string mentions = 3;
  bool slot_updates = 4;
}

message Update {
  oneof update_oneof {
    AccountWrite account_write = 1;
    SlotUpdate slot_update = 2;
    Ping ping = 3;
    SubscribeResponse subscribe_response = 4;
    TransactionInfo transaction_info = 5;
    AuthError auth_error = 6;
  }
}

message AuthError {
  string message = 1;
}

message AccountWrite {
  uint64 slot = 1;
  bytes pubkey = 2;
  uint64 lamports = 3;
  bytes owner = 4;
  bool executable = 5;
  uint64 rent_epoch = 6;
  bytes data = 7;
  uint64 write_version = 8;
  bool is_startup = 9;
  bool is_selected = 10;
}

message SlotUpdate {
  uint64 slot = 1;
  optional uint64 parent = 2;
  enum Status {
    PROCESSED = 0;
    ROOTED = 1;
    CONFIRMED = 2;
  }
  Status status = 3;
}

message TransactionInfo {
  uint64 slot = 1;
  bytes signature = 2;
  bool is_vote = 3;
  Message message = 4;
  repeated bytes signatures = 5;
  TransactionStatusMeta meta = 6;
}

message Message {
  MessageHeader header = 1;
  repeated bytes account_keys = 2;
  bytes recent_blockhash = 3;
  repeated CompiledInstruction instructions = 4;
  bool versioned = 5;
  repeated MessageAddressTableLookup address_table_lookups = 6;
}

message MessageHeader {
  uint32 num_required_signatures = 1;
  uint32 num_readonly_signed_accounts = 2;
  uint32 num_readonly_unsigned_accounts = 3;
}

message MessageAddressTableLookup {
  bytes account_key = 1;
  bytes writable_indexes = 2;
  bytes readonly_indexes = 3;
}

message TransactionStatusMeta {
  TransactionError err = 1;
  uint64 fee = 2;
  repeated uint64 pre_balances = 3;
  repeated uint64 post_balances = 4;
  repeated InnerInstructions inner_instructions = 5;
  bool inner_instructions_none = 10;
  repeated string log_messages = 6;
  bool log_messages_none = 11;
  repeated TokenBalance pre_token_balances = 7;
  repeated TokenBalance post_token_balances = 8;
  repeated Reward rewards = 9;
  repeated bytes loaded_writable_addresses = 12;
  repeated bytes loaded_readonly_addresses = 13;
}

message TransactionError {
  bytes err = 1;
}

message InnerInstructions {
  uint32 index = 1;
  repeated CompiledInstruction instructions = 2;
}

message CompiledInstruction {
  uint32 program_id_index = 1;
  bytes accounts = 2;
  bytes data = 3;
}

message TokenBalance {
  uint32 account_index = 1;
  string mint = 2;
  UiTokenAmount ui_token_amount = 3;
  string owner = 4;
  string program_id = 5;
}

message UiTokenAmount {
  double ui_amount = 1;
  uint32 decimals = 2;
  string amount = 3;
  string ui_amount_string = 4;
}

enum RewardType {
  Unspecified = 0;
  Fee = 1;
  Rent = 2;
  Staking = 3;
  Voting = 4;
}

message Reward {
  string pubkey = 1;
  int64 lamports = 2;
  uint64 post_balance = 3;
  RewardType reward_type = 4;
  string commission = 5;
}

message Rewards {
  repeated Reward rewards = 1;
}

message UnixTimestamp {
  int64 timestamp = 1;
}

message Ping {
}

message SubscribeResponse {
  uint64 highest_write_slot = 1;
}
